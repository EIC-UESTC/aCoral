/**
 * @file measure.c
 * @author 文佳源 (648137125@qq.com)
 * @brief 测试系统开销
 * @version 0.1
 * @date 2024-07-05
 * 
 * Copyright (c) 2024
 * 
 * @par 修订历史
 * <table>
 * <tr><th>版本 <th>作者 <th>日期 <th>修改内容
 * <tr><td>v1.0 <td>文佳源 <td>2024-07-05 <td>上下文切换开销测试
 * <tr><td>v1.0 <td>饶洪江 <td>2024-07-07 <td>核间迁移开销测试
 * <tr><td>v1.0 <td>文佳源 <td>2024-07-07 <td>调度开销测试
 * </table>
 */
#include <acoral.h>

#define MEASURE_TASK_PRIO           ACORAL_MAX_PRIO + 1
#define MEASURE_TASK_STACK_SIZE     512

/* note: can only choose one */
#define MEASURE_CONSEXT_SWITCH      0   /* 上下文切换测试 */
#define MEASURE_MOVE_THREAD         0   /* 线程切换测试 */
#define MEASURE_SCHEDULE            1   /* 调度测试 */

#if (MEASURE_SCHEDULE == 1)
    /* note: can only choose one */
    #define MEASURE_SCHED_COMMON    0   /* 普通调度策略 */
    #define MEASURE_SCHED_PERIOD    1   /* 周期调度策略 */
    #define MEASURE_SCHED_TIMED     0   /* 时间确定调度策略 */
#endif /* #if (MEASURE_SCHEDULE == 1) */

/* 保证配置选项不超过一项 */
#if ((MEASURE_CONSEXT_SWITCH == 1) && (MEASURE_MOVE_THREAD == 1) && (MEASURE_SCHEDULE == 1)) || \
((MEASURE_CONSEXT_SWITCH == 0) && (MEASURE_MOVE_THREAD == 1) && (MEASURE_SCHEDULE == 1)) || \
((MEASURE_CONSEXT_SWITCH == 1) && (MEASURE_MOVE_THREAD == 0) && (MEASURE_SCHEDULE == 1)) || \
((MEASURE_CONSEXT_SWITCH == 1) && (MEASURE_MOVE_THREAD == 1) && (MEASURE_SCHEDULE == 0))
    #error "only one measure can be choosed"
#endif /* a lot */

#if (MEASURE_SCHEDULE == 1)
    #if ((MEASURE_SCHED_COMMON == 1) && (MEASURE_SCHED_PERIOD == 1) && (MEASURE_SCHED_TIMED == 1)) || \
    ((MEASURE_SCHED_COMMON == 0) && (MEASURE_SCHED_PERIOD == 1) && (MEASURE_SCHED_TIMED == 1)) || \
    ((MEASURE_SCHED_COMMON == 1) && (MEASURE_SCHED_PERIOD == 0) && (MEASURE_SCHED_TIMED == 1)) || \
    ((MEASURE_SCHED_COMMON == 1) && (MEASURE_SCHED_PERIOD == 1) && (MEASURE_SCHED_TIMED == 0))
        #error "only one schedule measure can be choosed"
    #endif /* a lot */
#endif /* #if (MEASURE_SCHEDULE == 1) */

#if (MEASURE_CONSEXT_SWITCH == 1)

#define SWITCH_TEST_TIMES           10
#define SWITCH_TIMES_PER_TEST       100000

acoral_u32 start_tick = 0;       /* 正式测试开始时间 */  

acoral_u32 other_cost_ticks = 0; /* 其余操作总耗时 */

acoral_u32 total_during = 0;     /* 总耗时 */

acoral_u32 test_times = 0;       /* 测试次数计数 */
acoral_u32 switch_times = 0;     /* 每次测试的切换次数计数 */

acoral_id tc_id  = -1;
acoral_id js0_id = -1;
acoral_id js1_id = -1;

void test_cost_entry(void *args)
{
    acoral_print("test cost enter\r\n");
    acoral_u32 test_cost_start = acoral_ticks;
    while(1)
    {
        if(test_times == SWITCH_TEST_TIMES)
        {
            acoral_print("test cost done, during %u\r\n\r\n", total_during);
            break;
        }

        if(switch_times == SWITCH_TIMES_PER_TEST)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 switch_during = end_tick - start_tick;
            total_during += switch_during;
            acoral_print("test%u: other cost %u, during: %u\r\n", test_times, SWITCH_TIMES_PER_TEST, switch_during);

            test_times++;

            switch_times = 0;
            start_tick = acoral_ticks;
        }

        acoral_enter_critical();
        switch_times++;
        acoral_thread_change_prio_self(ACORAL_MAX_PRIO);
        acoral_thread_change_prio_by_id(tc_id, ACORAL_MAX_PRIO);
        acoral_exit_critical();
    }
    
    acoral_u32 test_cost_end = acoral_ticks;
    other_cost_ticks = test_cost_end - test_cost_start;

    test_times = 0;
    switch_times = 0;
    total_during = 0;

    start_tick = acoral_ticks;
}

void just_switch_0(void *args)
{ 
    acoral_print("js0 enter\r\n");
    while(1)
    {
        //acoral_print("js0\r\n");

        if(test_times == SWITCH_TEST_TIMES)
        {
            acoral_print("test total done, during %u\r\n\r\n", total_during);
            break;
        }

        if(switch_times == SWITCH_TIMES_PER_TEST)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 switch_during = end_tick - start_tick;
            total_during += switch_during;
            acoral_print("test%u: context switch %u, during: %u\r\n", test_times, SWITCH_TIMES_PER_TEST, switch_during);

            test_times++;

            switch_times = 0;
            start_tick = acoral_ticks;
        }

        acoral_enter_critical();
        switch_times++;
        acoral_thread_change_prio_self(MEASURE_TASK_PRIO + 1);
        acoral_thread_change_prio_by_id(js1_id, MEASURE_TASK_PRIO);
        acoral_exit_critical();
    }
}

void just_switch_1(void *args)
{
    acoral_print("js1 enter\r\n");
    while(1)
    {
        //acoral_print("js1\r\n");

        if(test_times == SWITCH_TEST_TIMES)
        {
            acoral_print("test total done, during %u\r\n\r\n", total_during);
            break;
        }

        if(switch_times == SWITCH_TIMES_PER_TEST)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 switch_during = end_tick - start_tick;
            total_during += switch_during;
            acoral_print("test%u: context switch %u, during: %u\r\n", test_times, SWITCH_TIMES_PER_TEST , switch_during);

            test_times++;

            switch_times = 0;
            start_tick = acoral_ticks;
        }

        acoral_enter_critical();
        switch_times++;
        acoral_thread_change_prio_self(MEASURE_TASK_PRIO + 1);
        acoral_thread_change_prio_by_id(js0_id, MEASURE_TASK_PRIO);
        acoral_exit_critical();
    }
}

void measure_consext_switch(void)
{
    acoral_print("[measure] create measure threads\r\n");
    acoral_comm_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO;
    js0_id=acoral_create_thread(
                just_switch_0,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "just_switch_0",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(js0_id==-1)
    {
        while(1);
    }
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO;
    js1_id=acoral_create_thread(
                just_switch_1,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "just_switch_1",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(js1_id==-1)
    {
        while(1);
    }    
}

acoral_u32 get_other_cost(void)
{
    acoral_print("[measure] create get other cost thread\r\n");
    acoral_comm_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=ACORAL_MAX_PRIO;
    tc_id=acoral_create_thread(
                test_cost_entry,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "test_cost_task",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(tc_id==-1)
    {
        while(1);
    }
}

#endif /* #if (MEASURE_CONSEXT_SWITCH == 1) */

#if (MEASURE_MOVE_THREAD == 1)

#define MOVE_TEST_TIMES           10
#define MOVE_TIMES_PER_TEST       100000

acoral_u32 start_tick = 0;       /* 正式测试开始时间 */

acoral_u32 other_cost_ticks = 0; /* 其余操作总耗时 */

acoral_u32 total_during = 0;     /* 总耗时 */

acoral_u32 test_times = 0;       /* 测试次数计数 */
acoral_u32 move_times = 0;     /* 每次测试的切换次数计数 */

acoral_id ep_id  = -1;
acoral_id tc_id  = -1;
acoral_id ms_id = -1;

void empty_entry(void *args)
{
	acoral_print("Empty thread is running\r\n");
	while(1);
}

void test_cost_entry(void *args)
{
    acoral_print("test cost enter\r\n");
    acoral_u32 test_cost_start = acoral_ticks;
    while(1)
    {
        if(test_times == MOVE_TEST_TIMES)
        {
            acoral_print("test cost done, during %u\r\n\r\n", total_during);
            break;
        }

        if(move_times == MOVE_TIMES_PER_TEST)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 move_during = end_tick - start_tick;
            total_during += move_during;
            acoral_print("test%u: other cost %u, during: %u\r\n", test_times, MOVE_TIMES_PER_TEST, move_during);

            test_times++;

            move_times = 0;
            start_tick = acoral_ticks;
        }

        acoral_enter_critical();
        move_times++;
        if(((acoral_thread_t *)acoral_get_res_by_id(ep_id))->cpu == 0)
        {
        	acoral_moveto_thread_by_id(ep_id, 0);
        }
        else
        {
        	acoral_moveto_thread_by_id(ep_id, 1);
        }
        acoral_exit_critical();
    }

    acoral_u32 test_cost_end = acoral_ticks;
    other_cost_ticks = test_cost_end - test_cost_start;

    test_times = 0;
    move_times = 0;
    total_during = 0;

    start_tick = acoral_ticks;
}

void move_thread(void *args)
{
    acoral_print("measure enter\r\n");
    while(1)
    {
        if(test_times == MOVE_TEST_TIMES)
        {
            acoral_print("test cost done, during %u\r\n\r\n", total_during);
            break;
        }

        if(move_times == MOVE_TIMES_PER_TEST)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 move_during = end_tick - start_tick;
            total_during += move_during;
            acoral_print("test%u: move %u, during: %u\r\n", test_times, MOVE_TIMES_PER_TEST, move_during);

            test_times++;

            move_times = 0;
            start_tick = acoral_ticks;
        }

        acoral_enter_critical();
        move_times++;
        if(((acoral_thread_t *)acoral_get_res_by_id(ep_id))->cpu == 0)
        {
        	acoral_moveto_thread_by_id(ep_id, 1);
        }
        else
        {
        	acoral_moveto_thread_by_id(ep_id, 0);
        }
        acoral_exit_critical();
    }
}

void create_empty_thread(void)
{
    acoral_print("[measure] create empty thread, which is used to be moved\r\n");
    acoral_comm_policy_data_t p_data;
    p_data.cpu = 1;
    p_data.prio = MEASURE_TASK_PRIO + 1;
    ep_id = acoral_create_thread(
    			empty_entry,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "empty_task",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(ep_id == -1)
    {
        while(1);
    }
}

void get_other_cost()
{
    acoral_print("[measure] create get other cost thread\r\n");
    acoral_comm_policy_data_t p_data;
    p_data.cpu = 0;
    p_data.prio = ACORAL_MAX_PRIO;
    tc_id=acoral_create_thread(
                test_cost_entry,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "test_cost_task",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(tc_id == -1)
    {
        while(1);
    }
}

void measure_move_thread()
{
    acoral_print("[measure] create measure threads\r\n");
    acoral_comm_policy_data_t p_data;
    p_data.cpu = 0;
    p_data.prio = MEASURE_TASK_PRIO;
    ms_id=acoral_create_thread(
    		    move_thread,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "move_thread",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(ms_id == -1)
    {
        while(1);
    }
}
#endif /* #if (MEASURE_MOVE_THREAD == 1) */

#if (MEASURE_SCHEDULE == 1)
#define COUNT_NUM                   1001000
#define COUNT_PER_SCHEDULE          1000
/**
 * 0xffffff: 大概 4757 ticks
 */

#define SCHEDULE_TEST_TIMES           10

acoral_u32 start_tick = 0;       /* 正式测试开始时间 */  

acoral_u32 other_cost_ticks = 0; /* 其余操作总耗时 */

acoral_u32 total_during = 0;     /* 总耗时 */

acoral_u32 test_times = 0;       /* 测试次数计数 */

acoral_u32 schedule_times = 0;   /* 调度次数计数 */

acoral_u32 counter = 0;

acoral_id tc_id  = -1;
acoral_id jc0_id = -1;
acoral_id jc1_id = -1;

acoral_id jcp_id = -1;

#if 0
/* 测试计数值使用多大的值合适 */
void test_count(void)
{
    acoral_u32 cnt = COUNT_NUM;
    acoral_u32 start_tick = acoral_ticks;

    while(--cnt != 0);

    acoral_u32 end_tick   = acoral_ticks;

    acoral_print("[test_count] cost %u ticks\r\n", end_tick - start_tick);
}
#endif

#if (MEASURE_SCHED_COMMON == 1)
void test_cost_entry(void *args)
{
    acoral_print("test cost enter\r\n");
    acoral_u32 test_cost_start = acoral_ticks;
    while(1)
    {
        if(test_times == SCHEDULE_TEST_TIMES)
        {
            acoral_print("test cost done, during %u\r\n\r\n", total_during);
            break;
        }

        if(counter == COUNT_NUM)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 count_during = end_tick - start_tick;
            total_during += count_during;
            acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

            test_times++;

            counter = 0;
            start_tick = acoral_ticks;
        }

        acoral_enter_critical();
        counter++;
        acoral_exit_critical();
    }
    
    acoral_u32 test_cost_end = acoral_ticks;
    other_cost_ticks = test_cost_end - test_cost_start;

    test_times = 0;
    counter = 0;
    total_during = 0;
    
    start_tick = acoral_ticks;
}

void just_count_common_0(void *args)
{ 
    acoral_print("jcc0 enter\r\n");
    while(1)
    {
        // acoral_print("jcc0\r\n");
        if(test_times == SCHEDULE_TEST_TIMES)
        {
            acoral_print("test total done, during %u\r\n\r\n", total_during);
            break;
        }

        if(counter == COUNT_NUM)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 count_during = end_tick - start_tick;
            total_during += count_during;
            acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

            test_times++;

            counter = 0;
            start_tick = acoral_ticks;
        }

        if(counter % COUNT_PER_SCHEDULE == 0)
        {
            acoral_rdy_thread_by_id(jc1_id);
            acoral_suspend_self();
        }

        acoral_enter_critical();
        counter++;
        acoral_exit_critical();
    }
}

void just_count_common_1(void *args)
{
    acoral_print("jcc1 enter\r\n");
    while(1)
    {
        // acoral_print("jcc1\r\n");
        if(test_times == SCHEDULE_TEST_TIMES)
        {
            acoral_print("test total done, during %u\r\n\r\n", total_during);
            break;
        }

        if(counter == COUNT_NUM)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 count_during = end_tick - start_tick;
            total_during += count_during;
            acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

            test_times++;

            counter = 0;
            start_tick = acoral_ticks;
        }

        if(counter % COUNT_PER_SCHEDULE == 0)
        {
            acoral_rdy_thread_by_id(jc0_id);
            acoral_suspend_self();
        }

        acoral_enter_critical();
        counter++;
        acoral_exit_critical();
    }
}
#elif (MEASURE_SCHED_PERIOD == 1)
#define MEASURE_PERIOD_TICKS       500
acoral_u8 period_other_cost_done = 0;

void empty_entry(void *args)
{
    while(period_other_cost_done == 0);
}

void test_cost_entry(void *args)
{
    acoral_print("test period other cost enter\r\n");

    acoral_u32 test_cost_start = acoral_ticks;
    start_tick = acoral_ticks;
    while(1)
    {
        acoral_u32 period_start_tick = acoral_ticks;
        if(period_other_cost_done == 0)
        {
            acoral_print("%u\r\n", counter);
            schedule_times++;
            if(
                (period_other_cost_done == 0) &&
                (test_times == SCHEDULE_TEST_TIMES)
            )
            {
                period_other_cost_done = 1;
                acoral_print("test other total done, during %u\r\n\r\n", total_during);
                break;
            }
#if 0
            while(counter < COUNT_NUM)
            {
                counter++;
            }
            
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 count_during = end_tick - start_tick;
            total_during += count_during;
            acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

            test_times++;

            counter = 0;
            start_tick = acoral_ticks;
#else
            acoral_u32 cur_tick = acoral_ticks;
            while(
                (counter < COUNT_NUM) &&
                (cur_tick - start_tick < MEASURE_PERIOD_TICKS - 1)
            )
            {
                acoral_print("cur-start=%u-%u=%u\r\n", cur_tick, start_tick, cur_tick - start_tick);
                counter++;
                cur_tick = acoral_ticks;
            }
            acoral_print("counter=%u\r\n", counter);

            if(counter >= COUNT_NUM)
            {
                acoral_u32 end_tick = acoral_ticks;
                acoral_u32 count_during = end_tick - start_tick;
                total_during += count_during;
                acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

                test_times++;
                counter = 0;
                start_tick = acoral_ticks;
            }

            acoral_u32 delay_to = period_start_tick + MEASURE_PERIOD_TICKS;
            while(acoral_ticks < delay_to);
            period_start_tick = acoral_ticks;
#endif
        }
    }
    acoral_u32 test_cost_end = acoral_ticks;
    other_cost_ticks = test_cost_end - test_cost_start;

    schedule_times = 0;
    test_times = 0;
    counter = 0;
    total_during = 0;

    start_tick = acoral_ticks;
}

acoral_u8 period_measure_done = 0;
void just_count_period(void *args)
{

    if(period_measure_done == 0)
    {
        // acoral_print("jcp enter\r\n");
        schedule_times++;
        if(
            (period_measure_done == 0) &&
            (test_times == SCHEDULE_TEST_TIMES)
        )
        {
            period_measure_done = 1;
            acoral_print("test total done, sched %u times, during %u\r\n\r\n", schedule_times, total_during);
            return;
        }

        while(counter < COUNT_NUM)
        {
            counter++;
        }

        if(counter >= COUNT_NUM)
        {
            acoral_u32 end_tick = acoral_ticks;
            acoral_u32 count_during = end_tick - start_tick;
            total_during += count_during;
            acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

            test_times++;
            counter = 0;
            start_tick = acoral_ticks;
        }
    }
    else
    {
        acoral_print("end--");
    }
}

void just_count_period_background(void *args)
{
    while(1)
    {
        if(period_measure_done == 0)
        {
            // acoral_print("jcp enter\r\n");
            schedule_times++;
            if(
                (period_measure_done == 0) &&
                (test_times == SCHEDULE_TEST_TIMES)
            )
            {
                period_measure_done = 1;
                acoral_print("test total done, sched %u times, during %u\r\n\r\n", schedule_times, total_during);
                break;
            }

            acoral_u32 cur_tick = acoral_ticks;
            while(counter < COUNT_NUM)
            {
                counter++;
            }

            if(counter >= COUNT_NUM)
            {
                acoral_u32 end_tick = acoral_ticks;
                acoral_u32 count_during = end_tick - start_tick;
                total_during += count_during;
                acoral_print("test%u: count %u, during: %u\r\n", test_times, COUNT_NUM, count_during);

                test_times++;
                counter = 0;
                start_tick = acoral_ticks;
            }
        }
        else
        {
            acoral_print("end--");
        }
    }
}

#elif (MEASURE_SCHED_TIMED == 1)

#else
#endif

void measure_schedule(void)
{
    acoral_print("[measure] create schedule measure threads\r\n");
#if (MEASURE_SCHED_COMMON == 1)
    acoral_comm_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO;
    jc0_id=acoral_create_thread(
                just_count_common_0,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "just_cc_0",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(jc0_id==-1)
    {
        while(1);
    }
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO;
    jc1_id=acoral_create_thread(
                just_count_common_1,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "just_cc_1",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(jc1_id==-1)
    {
        while(1);
    }    
#elif (MEASURE_SCHED_PERIOD == 1)
    acoral_period_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO;
    p_data.time=240;
    jcp_id=acoral_create_thread(
                just_count_period,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "just_count_period",
                NULL,
                ACORAL_SCHED_POLICY_PERIOD,
                &p_data,
                NULL,
                NULL
            );
    if(jcp_id==-1)
    {
        while(1);
    }

    acoral_comm_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO + 1;
    jc0_id=acoral_create_thread(
                just_count_period_background,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "just_cpb",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(jc0_id==-1)
    {
        while(1);
    }
#elif (MEASURE_SCHED_TIMED == 1)

#else

#endif
}

acoral_u32 get_other_cost(void)
{
    acoral_print("[measure] create get other cost thread\r\n");
    acoral_comm_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=ACORAL_MAX_PRIO;
    tc_id=acoral_create_thread(
                test_cost_entry,
                MEASURE_TASK_STACK_SIZE,
                NULL,
                "test_cost_task",
                NULL,
                ACORAL_SCHED_POLICY_COMM,
                &p_data,
                NULL,
                NULL
            );
    if(tc_id==-1)
    {
        while(1);
    }
}

void empty_period(void *args)
{
    acoral_print("-");
}

#define SCHEDULE_TEST_NUM       100
#define PERIOD_THREAD_NUM       5
void test_period_schedule(void)
{
    acoral_print("== test period schedule ==\r\n");

    /* 创建线程 */
    acoral_u8 i = 0;
    acoral_id period_ids[PERIOD_THREAD_NUM] = {0};
    acoral_period_policy_data_t p_data;
    p_data.cpu=acoral_current_cpu;
    p_data.prio=MEASURE_TASK_PRIO + 1;
    p_data.time=500;
    char *name[PERIOD_THREAD_NUM][16] = {0};
    for(i=0; i<PERIOD_THREAD_NUM; i++)
    {
        acoral_print("start create thread %u\r\n", i);
        name[i][0] = '0' + i;
        period_ids[i]=acoral_create_thread(
                    empty_period,
                    MEASURE_TASK_STACK_SIZE,
                    NULL,
                    name[i],
                    NULL,
                    ACORAL_SCHED_POLICY_PERIOD,
                    &p_data,
                    NULL,
                    NULL
                );
        if(period_ids[i]==-1)
        {
            while(1);
        }
    }

    acoral_print("[test_period_schedule] create threads success\r\n");

    void (*tmp_time_deal)() = NULL;

    extern acoral_queue_t policy_queue;
    acoral_list_t   *tmp,*head;
    acoral_sched_policy_t *policy_ctrl;
    head = &policy_queue.head;
    tmp = head;
    for (tmp = head->next; tmp != head; tmp = tmp->next) // 轮询策略节点
    {
        policy_ctrl = list_entry(tmp, acoral_sched_policy_t, list);
        if (policy_ctrl->type == ACORAL_SCHED_POLICY_PERIOD)
            tmp_time_deal = policy_ctrl->time_deal;
    }
    

    if(NULL == tmp_time_deal)
    {
        acoral_print("ERROR: period policy not found\r\n");
        while(1);
    }
    acoral_print("period policy found\r\n");

    acoral_enter_critical();
    acoral_u32 schedule_test_start_tick = acoral_ticks;

    for(i=0; i<SCHEDULE_TEST_NUM; i++)
    {
        tmp_time_deal();
    }

    acoral_u32 schedule_test_end_tick   = acoral_ticks;

    acoral_print("period schedule %u times cost %u ticks\r\n", SCHEDULE_TEST_NUM, schedule_test_end_tick - schedule_test_start_tick);
    acoral_exit_critical();

}

#endif /* #if (MEASURE_SCHEDULE == 1) */

void measure(void)
{
#if (MEASURE_CONSEXT_SWITCH == 1)
    acoral_print("== test context switch ==\r\n");
    total_during = 0;
    start_tick = acoral_ticks;
    get_other_cost();

    total_during = 0;
    start_tick = acoral_ticks;
    measure_consext_switch();
#endif /* #if (MEASURE_CONSEXT_SWITCH == 1) */

#if (MEASURE_MOVE_THREAD == 1)
    acoral_print("== test move thread ==\r\n");
    create_empty_thread();
    total_during = 0;
    start_tick = acoral_ticks;
    get_other_cost();

    total_during = 0;
    start_tick = acoral_ticks;
    measure_move_thread();
#endif /* #if (MEASURE_MOVE_THREAD == 1) */

#if (MEASURE_SCHEDULE == 1)
    acoral_print("== test schedule ==\r\n");
    // test_count();

    // total_during = 0;
    // start_tick = acoral_ticks;
    // get_other_cost();

    // total_during = 0;
    // start_tick = acoral_ticks;
    // measure_schedule();


    #if (MEASURE_SCHED_COMMON == 1)   /* 普通调度策略 */

    #endif /* #if (MEASURE_SCHED_COMMON == 1) */
    #if (MEASURE_SCHED_PERIOD == 1)   /* 周期调度策略 */
        // test_period_schedule();
    #endif /* #if (MEASURE_SCHED_PERIOD == 0) */
    #if (MEASURE_SCHED_TIMED  == 1)   /* 时间确定调度策略 */

    #endif /* #if (MEASURE_SCHED_TIMED  == 0) */
#endif /* #if (MEASURE_SCHEDULE == 1) */
}
